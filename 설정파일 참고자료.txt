- <properties> : property 안의 내용은 해당 XML 파일 내에서 변수처럼 쓰입니다.
- <repositories> : 라이브러리가 모여 있는 외부 저장소를 지정한다고 보면 돼요.
- <dependencies> : 이번 프로젝트에 사용할 라이브러리들을 받아오는 주소라고 생각하면 됩니다.
- <build> : 배포에 대한 내용입니다.

참고 : https://irisa10815.blog.me/221376983696

<!-- repository 설정 - 라이브러리가 모여 있는 외부 저장소를 지정-->
    <repositories>
        <repository>
            <id>in-project</id>
            <name>In Project Repo</name>
            <url>file://${project.basedir}/src/main/webapp/WEB-INF/lib</url>
        </repository>
    </repositories>


<!-- dbcp2 -->
1. DBCP 란 무엇인가?
DBCP란 Database Connection Pooling의 약자로 데이터베이스에 연결되는 패턴의 일종이다.
(일종의 캐쉬 역할을 수행한다고 생각하면 좋다.)
간단하게 말해서 서버의 쓰레드와 sql의 연결 객체를 요청이 올 때 마다 사용 하는 게 아니라, 미리 만들어 놓고 요청이 올 때 만들어진 객체를 연결 시켜주는 것을 의미한다.

2. DBCP를 사용해야 하는 이유는 무엇인가?
일반적인 JDBC를 이용하여 데이터베이스에 접근한다고 하면 다음과 같은 과정이 필수적으료 필요하다.
   
1.데이터베이스 드라이버를 로드하기(sql 회사 측에서 제공해준다.)
2.connection 객체를 생성한다.
3.객체로부터 쿼리를 수행하기 위해 preparedStatement 객체를 받는다.
4.쿼리를 수행하여 결과 값을 result 객체에 담는다.
5.처리가 끝나면 사용된 리소스를 반환한다.

이와 같은 과정은 많은 자원과 시간을 소모하게 된다.
하지만 DBCP를 이용하면 이러한 과정을 효율적으로 줄일 수 있는데, 메모리에 일정량의 connection객체를 미리 할당받아 필요할 때마다 객체를 사용하고 반환한다.

3. DBCP 종류
당연하게도? DBCP를 구현한 라이브러리들이 여러개 존재하고 우린 그것을 가져다 쓰기만 하면 된다. 
많이 사용되는 DBCP 라이브러리는 다음과 같은 것들이 있다.
  
1) Apache Commons DBCP
가장 많이 사용되는 DBCP 중 하나이다. DBCP와 DBCP2 버전이 있다. 현재는 DBCP2가 많이 사용된다. 인터넷에서 spring DBCP 라는 검색어로 예제를 검색하면 가장 많이 나오는 예제이기도 하다.
  
2) HikariCP
가장 빠르고 안정적이라 알려진 DBCP 라이브러리다. 오픈 소스이며 상업적 사용이 가능하다.
https://github.com/brettwooldridge/HikariCP 

3) c3p0
HikariCP 와 마찬가지로 오픈 소스이며 GNU 라이센스를 따른다. 
https://github.com/swaldman/c3p0 

참고 : https://blog.naver.com/hahava/221369200088

<!-- dbcp2 -->
  <dependency>
	<groupId>org.apache.commons</groupId>
	<artifactId>commons-dbcp2</artifactId>  
	<version>${dbcp2.version}</version>
	<exclusions>
		<exclusion>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
		</exclusion>
		<exclusion>
			<artifactId>commons-collections</artifactId>
			<groupId>commons-collections</groupId>
		</exclusion>
	</exclusions>
  </dependency>


<!-- AspectJ -->
1. AspectJ란?
AspectJ는 PARC에서 개발한 자바 프로그래밍 언어용 관점 지향 프로그래밍 (AOP) 확장 기능이다. 
이클립스 재단 오픈 소스 프로젝트에서 독립형 또는 이클립스로 통합하여 이용 가능하다. 
AspectJ는 최종 사용자를 위한 단순함과 이용성을 강조함으로써 폭넓게 사용되는 AOP에 대한 디 팩터 표준(사실 상 표준)이 되었다.

참고 : https://blog.naver.com/nhj7/221308158122
참고 : https://blog.outsider.ne.kr/845

<!-- AspectJ -->
  <dependency>
	<groupId>org.aspectj</groupId>
	<artifactId>aspectjrt</artifactId>
	<version>${org.aspectj-version}</version>
  </dependency>


<!-- org.apache.commons -->
아파치 Commons 프로젝트의 Lang 라이브러리에 포함된, 실전을 통해 다듬어진 오픈 소스 유틸리티를 활용해 코딩을 줄여 봅니다.

commons lang에서 제공하는 여러가지 기능들
- 문자열 처리 메서드
- 기본 수학 메서드
- 객체 리플렉션(reflection)
- 객체 생성과 직렬화(serialization)
- 시스템 프로퍼티(property)
- 상속 받을 수 있는 열거형(enum type)
- 여러 형태의 중첩된 예외(nested exception)
- java.util.Date에 대한 개선
- hashCode, toString, equals 같은 메서드를 구현하는 데 도움이 되는 유틸리티


더 많은 코드는 더 많은 오류를 의미
평균적인 애플리케이션은 통상 코드 1000줄 당 20개에서 250개의 오류를 가지고 있다. (defect density)
-> 코드 줄수가 적으면 오류도 적다!
 
Object 클래스에는 통상 재정의(override)되어야 하는 다음 세 개의 메서드가 정의
- equals
- hashCode
- toString


1. equals() 구현하기
equals 규약
- 어떤 null이 아닌 객체 foo에 대해 foo.equals(foo)가 true이어야 한다. -> reflexive
- null이 아닌 두 객체 foo와 bar에 대해 foo.equals(bar)가 true면, bar.equals(foo)도 true여야 한다. -> symmetric
- null이 아닌 세 객체 foo, bar, baz에 대해 foo.equals(bar)가 true고 bar.equals(baz)가 true면 foo.equals(baz)도 true여야 한다. -> transitive
- 두 객체 foo와 bar에 대해 foo.equals(bar)가 true면 equals 메서드는 (두 객체가 실제 변경되지 않는다는 전제 하에) 몇 번을 호출하든 항상 true여야 한다. -> consistent
- foo.equals(null)은 false를 돌려줘야 한다.

구현방법
1. 각 필드를 직접 비교하는 방법
2. EqualsBuilder의 append(),isEquals() 메소드를 이용하는 방법
3. EqualsBuilder의 reflectionEquals() 메소드를 이용하는 방법 -> 성능에 영향을 줄 수 있으나, 필드가 변경되는 경우 따로 구현체를 수정하지 않아도 된다.


2. hashCode() 구현하기
hashCode 규약
- 두 객체 foo와 bar가 있을 때 foo.equals(bar)가 true면 foo와 bar의 hashCode는 모두 같은 값을 돌려 줘야 한다
- 재정의하지 않는 경우 random integer 같은 값을 반환 -> 통상 플랫폼이 객체의 메모리 주소를 정수로 변경해서 돌려주기 때문이나 보장하지 못함

구현방법
1. 직접 로직을 구현하는 방법
2. HashCodeBuilder의 append(),toHashCode() 메소드를 이용하는 방법
3. HashCodeBuilder의 reflectionHashCode() 메소드를 이용하는 방법


3. toString() 구현하기
Object의 기본 toString 구현은 객체의 완전히 명시된 이름(fully qualified name)에 @ 문자를 붙이고 그 객체의 해시 코드 값을 추가한 문자열 -> 꼭 그렇지는 않으며, 내용이 디버그에 별 도움이 안됨

구현방법
1. 직접 리턴 문자열을 만드는 방법
2. ToStringBuilder의 append(),toString() 메소드를 이용하는 방법
3. ToStringBuilder의 reflectionToString() 메소드를 이용하는 방법

원문링크 : IBM developerWorks 중 "불필요한 코딩을 줄이자!"

참고 : https://blog.naver.com/ruly2001/70069240400

<!-- org.apache.commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.0</version>
        </dependency>


<!-- com.ibm.icu --!>
**특정 파일의 인코딩 타입 알아내기
인코딩 타입이란 특정 캐릭터셋으로 만들어진 파일을 보여주는 방식입니다.
전세계 주요 언어문자를 하나의 바이너리 코드로 처리하기 위해서 유니코드(unicode)를 만들었지만 이 코드를 보여주는 인코딩 방식은 다양합니다.
많이 사용하는 인코딩 타입으로는 UTF-8, UTF-16, EUC-KR, ISO8859-1, MS949등이 있는데요,
텍스트 파일이 어떤 인코딩 타입으로 설정되어 있느냐에 따라 똑같은 유니코드 데이터도 제대로 보이기도 안보이기도 합니다. 그럼 이 파일이 어떤 인코딩타입으로 되어 있는지 알아내려면 어떻게 해야 할까요?
BOM이라는게 있습니다. BOM(Byte Order Mask)은 파일이 어떤 인코딩 타입임을 나타냅니다만 어떤 에디터는 이 BOM을 생략하기도 하기때문에 절대적이라고 볼 수는 없습니다. 
그럼 자바로 쉽게 인코딩 타입을 확인할 수는 없을까? ICU를 이용하면 가능합니다.
ICU(International Component for Unicode)는 이와 관련된 라이브러리를 제공합니다. C와 Java를 지원하며 제가 확인한 것은 자바용인 ICU4J입니다. 

1.Maven의 POM에 관련 설정을 추가합니다.
      <dependency>
          <groupId>com.ibm.icu</groupId>
          <artifactId>icu4j</artifactId>
          <version>4.0.1</version>
          <type>jar</type>
          <scope>compile</scope>
      </dependency>

2.유틸리티 함수를 하나 추가합니다. 저의 경우에는 FileUtil이라는 유틸클래스에 추가했습니다.
    public static String readFileToString(File file) throws Exception {
        try {
            CharsetDetector detector = new CharsetDetector();            
            detector.setText(FileUtils.readFileToByteArray(file));
            return FileUtils.readFileToString(file, detector.detect().getName());            
        } catch (IOException e) {
            throw new Exception(e);
        }
    }
테스트해 보니 EUC-KR, UTF8인 경우에는 잘 동작합니다. 
많이들 필요할것 같은데 의외로 자료가 없어서 찾는데 애를 좀 먹어서 정리해놓습니다.

참고 : http://pragmaticstory.tistory.com/1548

<!-- com.ibm.icu --!>
        <dependency>
            <groupId>com.ibm.icu</groupId>
            <artifactId>icu4j</artifactId>
            <version>4.0.1</version>
        </dependency>

**root-context.xml
<tx:annotation-driven />
@Transactional
트랜잭션 AOP 적용을 위해 애노테이션을 이용하는 방법이다. 

<tx:annotation-driven> 태그는 등록된 빈 중에서 @Transactional 이 붙은 클래스나 인터페이스 또는 메소드를 찾아 트랜잭션 어드바이스를 적용해준다.

@Transactional(propagation=Propagation.SUPPORTS)
이미 시작된 트랜잭션이 있으면 참여하고 그렇지 않으면 트랜잭션 없이 진행하게 만든다.
 트랜잭션이 없긴 하지만 경계 안에서 Connection이나 하이버네이트 Session 등을 공유할 수 있다.

- Spring Annotation 훑어보기.
참고 : https://weicomes.tistory.com/455

**Spring MyBatis configuration 설정 <typeAliases>
- typeAliases를 설정해주면 mapper에서 Vo 객체로 리턴할 시 패키지 이름을 다 적을 필요가 없다.
참고 : https://blog.naver.com/qjadud22/221010670702

<configuration>
    <typeAliases>
<!--  
        <typeAlias type="com.practice.web.testmember.TestmemberVO" alias="TestmemberVO"/>
-->
    </typeAliases>
</configuration>